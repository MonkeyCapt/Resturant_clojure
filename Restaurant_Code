(ns resturant.core)

;; A list of constraits to search for restaurants
;; Each resturant is in the array that corresponds with what it should have and the locations
(defrecord location [ chicago market westSide eastSide lake joliet michigan belmont addison ])
(def price [ 5 10 15 20 30 22 13 18 21])
(defrecord allergies [ none peanuts seafood])
(defrecord cusine [ american mexican chinese thai korean])
(def stars [ 1 2 3 4 5])
(defrecord dining [casual dignified])
(defrecord parking [ valet nvalet])
(defrecord place [ norh hoshido mcDonalds burgerKing cheesecakeFactory chipotle orangeChicken mountains prevance])

;; The search method if implemented with a UI should take the answer's implemtend here
;; and cross refrence them in the record classes in order to make sure that all is fine
(defn search [location price allergies cusine starts dining parking]
  (str "Where would you like to go?", location)
  (location == [location] ("you are going to get a location in" " "))
  (<= price 30)
  (str "How many stars would you like the place to have?" stars)
  (<= [stars] 5)
  (allergies == [allergies] ("Do you have any allergies?" allergies))
  (dining == [dining] ("what type of dinining would you like, casual or dignified?" dining))
  (parking == [parking] ("What style of parking would you like, valet or nvalet" parking))
)

;; All the different constraints that are needed for the resturants to be chosen
;; If one or more match the specifications are met all possible choices are shown
(defn choose-norh [place]
  (if [location] == "chicago")
  (if [price] <= 20)
  (if [stars] <= 4)
  (if [allergies] == "none")
  (if [dining] == "dignified")
  (if [cusine] == "thai")
  (if [parking] == "valet")
  (print "You can eat at Norh")
)
(defn choose-hoshido [place]
  (if [location] == "market")
  (if [price] <= 25)
  (if [stars] <= 4.5)
  (if [allergies] == "none")
  (if [dining] == "dignified")
  (if [cusine] == "chinese")
  (if [parking] == "valet")
  (print "You can eat at hoshido")
)
(defn choose-mcDonalds [place]
  (if [location] == "westSide")
  (if [price] <= 5)
  (if [stars] <= 1)
  (if [allergies] == "seafood")
  (if [dining] == "casual")
  (if [cusine] == "american")
  (if [parking] == "nvalet")
  (print "You can eat at mcDonalds")
)
(defn choose-burgerKing [place]
  (if [location] == "eastSide")
  (if [price] <= 10)
  (if [stars] <= 2)
  (if [allergies] == "seafood")
  (if [dining] == "casual")
  (if [cusine] == "american")
  (if [parking] == "nvalet")
  (print "You can eat at burgerKing")
)
(defn choose-cheesecakefactory [place]
  (if [location] == "lake")
  (if [price] <= 20)
  (if [stars] <= 3.5)
  (if [allergies] == "peanuts")
  (if [dining] == "casual")
  (if [cusine] == "american")
  (if [parking] == "valet")
  (print "You can eat at the CheeseCake Factory")
)
(defn choose-chipotle [place]
  (if [location] == "joliet")
  (if [price] <= 15)
  (if [stars] <= 3)
  (if [allergies] == "none")
  (if [dining] == "casual")
  (if [cusine] == "mexican")
  (if [parking] == "nvalet")
  (print "You can eat at Chipotle")
)
(defn choose-orangeChicken [place]
  (if [location] == "michigan")
  (if [price] <= 18)
  (if [stars] <= 2.4)
  (if [allergies] == "seafood")
  (if [dining] == "casual")
  (if [cusine] == "chinese")
  (if [parking] == "nvalet")
  (print "You can eat at Orange Chicken")
)
(defn choose-mountains [place]
  (if [location] == "belmont")
  (if [price] <= 30)
  (if [stars] <= 5)
  (if [allergies] == "peanuts")
  (if [dining] == "dignified")
  (if [cusine] == "thai")
  (if [parking] == "valet")
  (print "You can eat at the Mountains")
)
(defn choose-prevance [place]
  (if [location] == "addison")
  (if [price] <= 28)
  (if [stars] <= 4.7)
  (if [allergies] == "seafood")
  (if [dining] == "dignified")
  (if [cusine] == "mexican")
  (if [parking] == "valet")
  (print "You can eat at Prevance")
)
